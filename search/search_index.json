{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QuAIR","text":"<p>Quantum AI Research (QuAIR) Lab, led by Prof. Xin Wang at HKUST (Guangzhou), is dedicated to pushing the fundamental boundaries of quantum information processing and driving technological advancements for quantum computing, guided by AI for Quantum and Quantum for AI.</p>"},{"location":"#quair-platform","title":"QuAIR-Platform","text":""},{"location":"#quairkit","title":"QuAIRKit","text":"<p>QuAIRKit is a Python research framework for quantum computing, quantum information, and quantum machine learning algorithm development. It focuses on flexible design, real-time simulation and rapid verification of quantum and classical algorithms.</p>"},{"location":"#qrlab","title":"QRLab","text":"<p>QRLab: Matlab Package for Quantum Information Processing and Quantum Resource Theory is a MATLAB toolbox for exploring quantum information processing and quantum resource theory.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Entanglement Theory: Static and dynamic measures including Logarithmic Negativity, Rains Bound, and Quantum Capacity.</li> <li>Coherence Theory: Robustness of Coherence and channel simulation.</li> <li>Magic Theory: Robustness of Magic, Magic Mana, and state generation.</li> <li>Quasi-Theory: Error mitigation techniques like probabilistic and deterministic error cancellation.</li> <li>Supermap: Quantum Switch operations and Link Product.</li> <li>Seesaw Algorithms: Sub-optimal solutions for non-linear optimization problems like CHSH game and LOCC protocol.</li> <li>Extra Functions: Conditional quantum mutual information and Virtual Markovian State.</li> </ul>"},{"location":"#quick","title":"QuICK","text":"<p>QuICK: Quantum Integrity and Correction Kit is a quantum error correction package in the QuAIR team (under construction). The tools are for code construction and decoding.</p>"},{"location":"#features_1","title":"Features","text":"<ul> <li>QuICK: contain error correction codes include:</li> <li>code: classical and quantum code construction<ul> <li>ClassicalCode: binary classical linear block code</li> <li>Stabilizer: quantum stabilizer code</li> <li>CSSCode: quantum Calderbank-Shor-Steane(CSS) code</li> <li>HGP: quantum hypergraph product code</li> <li>LP: quantum lifted product code</li> </ul> </li> <li>utils: binary linear algebra and code utilities</li> </ul>"},{"location":"QRLab/","title":"QRLab","text":"<p>QRLab is a MATLAB toolbox for exploring quantum information processing and quantum resource theory.</p>"},{"location":"QRLab/#features","title":"Features","text":"<ul> <li> <p>Entanglement Theory: </p> <ul> <li> <p>Static Entanglement Measure: Tempered Logarithmic Negativity \\(E_{ \\mathrm{\\tau}}\\), Rains Bound \\(R\\), MaxRainsEntropy \\(R_{ \\mathrm{max}}\\), Logarithmic Negativity \\(E_\\text{N}\\), \\(E_{ \\mathrm{PPT}}\\), \\(E_ \\mathrm{eta}\\)</p> </li> <li> <p>Dynamic Entanglement Measure: Max Logarithmic Negativity, Max Rains information. </p> </li> <li> <p>Quantum Capacity</p> </li> </ul> </li> <li> <p>Coherence Theory: </p> <ul> <li> <p>Static Coherence Measure: Robustness of Coherence </p> </li> <li> <p>Channel Simulation: Simulating non-free operations via resource states.</p> </li> </ul> </li> <li> <p>Magic Theory: </p> <ul> <li> <p>Static Magic Measure: Robustness of Magic (qubit), Magic Mana (qudit), max/min Thuama (qudit) </p> </li> <li> <p>Representative Magic State Generation</p> </li> </ul> </li> <li> <p>Quasi-Theory: </p> <ul> <li> <p>Probabilistic error cancelation </p> </li> <li> <p>Observable dependent probabilistic error cancellation </p> </li> <li> <p>Observable dependent deterministic error cancelation </p> </li> <li> <p>Circuit Knitting </p> </li> <li> <p>Virtual Recovery</p> </li> </ul> </li> <li> <p>Supermap: </p> <ul> <li>Quantum Switch (both kraus and choi), Apply Quantum Switch</li> <li>Link Product</li> </ul> </li> <li> <p>Seesaw Algorithms: Algorithms for providing sub-optimal solutions for non-linear optimization problems. </p> <ul> <li> <p>CHSH game </p> </li> <li> <p>LOCC protocol</p> </li> </ul> </li> <li> <p>Extra Functions - Quantum Information Processing: </p> <ul> <li> <p>Conditional quantum mutual information </p> </li> <li> <p>Virtual Markovian State</p> </li> </ul> </li> </ul>"},{"location":"QRLab/#requirements","title":"Requirements","text":"<ol> <li>QETLAB == 0.9</li> <li>CVX == 2.1</li> </ol>"},{"location":"QRLab/#installation","title":"Installation","text":"<ol> <li>Clone QRLab to your local machine.</li> <li>Download QETLAB 0.9. You could download it from https://qetlab.com/.</li> <li>Add QRLab and QETLAB to MATLAB's path\u200b, through command</li> </ol> <pre><code>addpath(genpath('...\\QETLAB-0.9'));\naddpath(genpath('...\\QRlab'));\n</code></pre> <ol> <li>Download and install CVX 2.1. You could download it from https://cvxr.com/cvx/. Install CVX on Windows</li> </ol> <pre><code>cd yourpath\\cvx;\u200b\ncvx_setup;\n</code></pre> <p>Install CVX on Linux or a Mac</p> <pre><code>cd ~/MATLAB/cvx;\u200b\ncvx_setup;\n</code></pre>"},{"location":"QRLab/#getting-started-use-cases","title":"Getting Started: Use Cases","text":"<p>To use the package, simply call the function you need with appropriate parameters. For example:</p> <pre><code>% To calculate the robustness of entanglement\nrho = [0.5, 0.5; 0.5, 0.5]; % Define a quantum state\nrobustness = EntanglementRobustness(rho);\ndisp('Robustness of Entanglement:');\ndisp(robustness);\n</code></pre>"},{"location":"QRLab/#more-functions-are-coming","title":"More functions are coming.","text":""},{"location":"QRLab/#contributing","title":"Contributing","text":"<p>Contributions to expand and improve this package are welcome.</p>"},{"location":"QuICK/","title":"QuICK","text":"<p>Quantum Integrity and Correction Kit (QuICK) is a quantum error correction package in the QuAIR team (under construction). The tools are for code construction and decoding.</p> <p> </p>"},{"location":"QuICK/#features","title":"Features","text":"<ul> <li><code>QuICK</code>: contain error correction codes include:</li> <li><code>code</code>: classical and quantum code construction<ul> <li><code>ClassicalCode</code>: binary classical linear block code</li> <li><code>Stabilizer:</code> quantum stabilizer code</li> <li><code>CSSCode</code>: quanutm Calderbank-Shor-Steane(CSS) code</li> <li><code>HGP</code>: quantum hypergraph product code</li> <li><code>LP</code>: quantum lifted product code</li> </ul> </li> <li><code>utils</code>: binary linear algebra and code utilities</li> <li><code>dataset</code>: commonly used classical and quantum codes</li> <li><code>error</code>: simple Pauli error</li> <li><code>decoder</code>: code decoder<ul> <li><code>bp_decoder</code>: belief propagation sum-product decoder</li> </ul> </li> <li><code>tutorial</code>: tutorials for quantum error correction</li> </ul>"},{"location":"QuICK/#installation","title":"Installation","text":"<p>Set up Anaconda environment</p> <pre><code>conda create -n quair python=3.10\nconda activate quair\nconda install jupyter notebook\n</code></pre> <p>Install QuICK locally</p> <pre><code>cd ./&lt; your place for QuICK &gt;\npip install -e .\n</code></pre>"},{"location":"QuICK/#tutorials","title":"Tutorials","text":"<ul> <li>Error Correction Codes</li> <li>CSS Code</li> <li>Hypergraph Product Code</li> <li>Lifted Product Code</li> <li>Stabilizer Code</li> <li>Error Correction Decoders</li> <li>Belief Propagation Decoder</li> <li>How to use Pymatching</li> </ul>"}]}